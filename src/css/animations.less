@push: cubic-bezier(0.37, 0.37, 0.12, 1.01);
@pull: cubic-bezier(0.65, 0.29, 0.41, 1.07);

:root {
  --multiplier: 1.2;
  --sequence-steps: 0.1s;
  --timing-function: @pull;

  // Custom values
  --move: 25%;
  --zoom: 1.2;
  --rotate: 15deg;
}

span {
  &.animate,
  &.animate--js {
    display: inline-block;
  }
}

.animate {
  animation-name: var(--animation, fade);
  animation-duration: var(--duration, 1s);
  animation-timing-function: var(--timing-function, linear);
  animation-delay: var(--delay, 0s);
  animation-direction: var(--direction, normal);
  animation-fill-mode: var(--fill-mode, both);
  animation-iteration-count: var(--iteration-count, 1);
  animation-play-state: var(--play-state, running);
}

.animate--js {
  animation-duration: var(--duration, 1s);
  animation-timing-function: var(--timing-function, linear);
  animation-delay: var(--delay, 0s);
  animation-direction: var(--direction, normal);
  animation-iteration-count: var(--iteration-count, 1);
  animation-play-state: var(--play-state, paused);
  opacity: 0;

  &.in {
    animation-name: var(--animation, fade);
    animation-fill-mode: var(--fill-mode, both);
    animation-play-state: var(--play-state, running);
    opacity: 1;
  }
}

// Durations
.duration-xs  { --duration: 0.25s; }
.duration-s   { --duration: 0.50s; }
.duration-m   { --duration: 1.00s; }
.duration-l   { --duration: 2.00s; }
.duration-xl  { --duration: 5.00s; }
.reset-duration { --duration: revert; }

// Delays
.delay-xs { --delay: 0.10s; }
.delay-s  { --delay: 0.25s; }
.delay-m  { --delay: 0.50s; }
.delay-l  { --delay: 1.00s; }
.delay-xl { --delay: 2.00s; }
.reset-delay { --delay: revert; }

// Timing functions
.linear       { --timing-function: linear; }
.ease         { --timing-function: ease; }
.ease-in      { --timing-function: ease-in; }
.ease-out     { --timing-function: ease-out; }
.cubic-in     { --timing-function: cubic-bezier(0.55, 0.06, 0.68, 0.19); }
.cubic-out    { --timing-function: cubic-bezier(0.22, 0.61, 0.36, 1); }
.cubic-in-out { --timing-function: cubic-bezier(0.65, 0.05, 0.36, 1); }
.push         { --timing-function: @push; }
.pull         { --timing-function: @pull; }

// Directions
.reverse            { --direction: reverse; }
.alternate          { --direction: alternate; }
.alternate-reverse  { --direction: alternate-reverse; }
.reset-direction    { --direction: revert; }

// Fill modes
.forwards   { --fill-mode: forwards; }
.backwards  { --fill-mode: backwards; }
.both       { --fill-mode: both; }
.reset-fill-mode { --fill-mode: revert; }

// Iteration counts
.once     { --iteration-count: 1; }
.infinite { --iteration-count: infinite; }
.reset-iteration-count { --iteration-count: revert; }

// Play states
.paused   { --play-state: paused; }
.running  { --play-state: running; }
.reset-play-state { --play-state: revert; }

// Pre-defined states
.loop {
  --timing-function: linear;
  --direction: normal;
  --fill-mode: none;
  --iteration-count: infinite;
}
.pulse {
  --timing-function: cubic-bezier(0.65, 0.05, 0.36, 1);
  --direction: alternate;
  --fill-mode: none;
  --iteration-count: infinite;
}

.reset {
  --name: revert;
  --duration: revert;
  --timing-function: revert;
  --delay: revert;
  --direction: revert;
  --fill-mode: revert;
  --iteration-count: revert;
  --play-state: revert;
}

// Sequence
.animate.sequence,
.animate--js.sequence {
  animation: none;

  > span {
    display: inline-block;
  }
  > * {
    animation-name: var(--animation, fade);
    animation-duration: var(--duration, 1s);
    animation-timing-function: var(--timing-function, linear);
    animation-delay: var(--delay, 0s);
    animation-direction: var(--direction, normal);
    animation-iteration-count: var(--iteration-count, 1);
    animation-play-state: var(--play-state, paused);
    opacity: 0;

    &:nth-child(1) { --delay: 0.00s; }
    &:nth-child(2) { --delay: ~'calc(var(--sequence-steps, 0.1s) * 1)'; }
    &:nth-child(3) { --delay: ~'calc(var(--sequence-steps, 0.1s) * 2)'; }
    &:nth-child(4) { --delay: ~'calc(var(--sequence-steps, 0.1s) * 3)'; }
    &:nth-child(5) { --delay: ~'calc(var(--sequence-steps, 0.1s) * 4)'; }
    &:nth-child(6) { --delay: ~'calc(var(--sequence-steps, 0.1s) * 5)'; }
    &:nth-child(7) { --delay: ~'calc(var(--sequence-steps, 0.1s) * 6)'; }
    &:nth-child(8) { --delay: ~'calc(var(--sequence-steps, 0.1s) * 7)'; }
  }
}

.animate--js.sequence {
  &.in > * {
    animation-name: var(--animation, fade);
    animation-fill-mode: var(--fill-mode, both);
    animation-play-state: var(--play-state, running);
    opacity: 1;
  }
}

// Animations
.fade             { --animation: fade; }

.zoomIn           { --animation: zoomIn; }
.zoomInFade       { --animation: zoomInFade; }
.zoomOut          { --animation: zoomOut; }
.zoomOutFade      { --animation: zoomOutFade; }

.moveTop          { --animation: moveTop; }
.moveTopFull      { --animation: moveTopFull; }
.moveBottom       { --animation: moveBottom; }
.moveBottomFull   { --animation: moveBottomFull; }
.moveLeft         { --animation: moveLeft; }
.moveLeftFull     { --animation: moveLeftFull; }
.moveRight        { --animation: moveRight; }
.moveRightFull    { --animation: moveRightFull; }

.rotate           { --animation: rotater; }
.rotateX          { --animation: rotateX; }
.rotateY          { --animation: rotateY; }
.rotateQuarter    { --animation: rotateQuarter; }

.rotateHalf       { --animation: rotateHalf; }
.rotateXHalf      { --animation: rotateXHalf; }
.rotateYHalf      { --animation: rotateYHalf; }

.rotateFull       { --animation: rotateFull; }
.rotateYFull      { --animation: rotateYFull; }
.rotateXFull      { --animation: rotateXFull; }

.cutIn            { --animation: cutIn; }
.cutInSplit       { --animation: cutInSplit; }

.slideUp          { --animation: slideUp; }
.slideDown        { --animation: slideDown; }


/*

flips
fades
rotates
zooms
clip-path

 */

// Fade animations
@keyframes fade {
  0%    { opacity: 0; }
  100%  { opacity: 1; }
}

// Translate animations
@keyframes moveTop {
  0%    { transform: translate(0, ~'calc(var(--move) * -1)'); }
  100%  { transform: translate(0, 0); }
}
@keyframes moveTopFull {
  0%    { transform: translate(0, 100%); }
  100%  { transform: translate(0, 0); }
}
@keyframes moveBottom {
  0%    { transform: translate(0, var(--move)); }
  100%  { transform: translate(0, 0); }
}
@keyframes moveBottomFull {
  0%    { transform: translate(0, 100%); }
  100%  { transform: translate(0, 0); }
}
@keyframes moveLeft {
  0%    { transform: translate(~'calc(var(--move) * -1)', 0); }
  100%  { transform: translate(0, 0); }
}
@keyframes moveLeftFull {
  0%    { transform: translate(100%, 0); }
  100%  { transform: translate(0, 0); }
}
@keyframes moveRight {
  0%    { transform: translate(var(--move), 0); }
  100%  { transform: translate(0, 0); }
}
@keyframes moveRightFull {
  0%    { transform: translate(100%, 0); }
  100%  { transform: translate(0, 0); }
}

// Rotation animations
@keyframes rotate {
  0%    { transform: rotate(var(--rotate)); }
  100%  { transform: rotate(0); }
}
@keyframes rotateFull {
  0%    { transform: rotate(360deg); }
  100%  { transform: rotate(0deg); }
}
@keyframes rotateHalf {
  0%    { transform: rotate(180deg); }
  100%  { transform: rotate(0deg); }
}
@keyframes rotateQuarter {
  0%    { transform: rotate(90deg); }
  100%  { transform: rotate(0deg); }
}

// Zooming animations
@keyframes zoomOut {
  0%    { transform: scale(~'calc(1 * var(--multiplier, 1))'); }
  100%  { transform: scale(1.0); }
}
@keyframes zoomOutFade {
  0%    { transform: scale(~'calc(1 * var(--multiplier, 1))'); opacity: 0; }
  100%  { transform: scale(1.0); opacity: 1; }
}

@keyframes zoomIn {
  0%    { transform: scale(~'calc(1 / var(--multiplier, 1))'); }
  100%  { transform: scale(1.0); }
}
@keyframes zoomInFade {
  0%    { transform: scale(~'calc(1 * var(--multiplier, 1))'); opacity: 0; }
  100%  { transform: scale(1.0); opacity: 1; }
}

// 3D Rotation X
@keyframes rotateX {
  0%    { transform: perspective(500px) rotateX(~'calc(var(--rotate, 15deg) * var(--multiplier, 1))'); }
  100%  { transform: perspective(500px) rotateX(0); }
}
@keyframes rotateXHalf {
  0%    { transform: perspective(500px) rotateX(45deg); }
  100%  { transform: perspective(500px) rotateX(0); }
}
@keyframes rotateXFull {
  0%    { transform: perspective(500px) rotateX(90deg); }
  100%  { transform: perspective(500px) rotateX(0); }
}

// 3D Rotation Y
@keyframes rotateY {
  0%    { transform: perspective(500px) rotateY(~'calc(var(--rotate, 15deg) * var(--multiplier, 1))'); }
  100%  { transform: perspective(500px) rotateY(0); }
}
@keyframes rotateYHalf {
  0%    { transform: perspective(500px) rotateY(45deg); }
  100%  { transform: perspective(500px) rotateY(0); }
}
@keyframes rotateYFull {
  0%    { transform: perspective(500px) rotateY(90deg); }
  100%  { transform: perspective(500px) rotateY(0); }
}

// Clip path animations
@keyframes cutIn {
  0%    {
    -webkit-clip-path: polygon(0 100%, 100% 100%, 100% 100%, 0% 100%);
            clip-path: polygon(0 100%, 100% 100%, 100% 100%, 0% 100%);
  }
  100%  {
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
            clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
  }
}

@keyframes cutInSplit {
  0%    {
    -webkit-clip-path: polygon(50% 0, 50% 0, 50% 100%, 50% 100%);
            clip-path: polygon(50% 0, 50% 0, 50% 100%, 50% 100%);
  }
  100%  {
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
            clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
  }
}

// Clip path + move animations
@keyframes slideUp {
  0%    {
    transform: translate(0, 100%);
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 0, 0 0);
            clip-path: polygon(0 0, 100% 0, 100% 0, 0 0);
  }
  100%  {
    transform: translate(0, 0);
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
            clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
  }
}
@keyframes slideDown {
  0%    {
    transform: translate(0, -100%);
    -webkit-clip-path: polygon(0 100%, 100% 100%, 100% 100%, 0% 100%);
            clip-path: polygon(0 100%, 100% 100%, 100% 100%, 0% 100%);
  }
  100%  {
    transform: translate(0, 0);
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
            clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
  }
}